-- Test file for "Tables and Data" documentation
-- This file contains all SQL statements from https://supabase.com/docs/guides/database/tables-and-data
create table movies (
  id bigint generated by default as identity primary key,
  name text,
  description text
);
select table_name, column_name, data_type, is_nullable, column_default
from information_schema.columns 
where table_name = 'movies' 
order by ordinal_position;
 table_name | column_name | data_type | is_nullable | column_default 
------------+-------------+-----------+-------------+----------------
 movies     | id          | bigint    | NO          | 
 movies     | name        | text      | YES         | 
 movies     | description | text      | YES         | 
(3 rows)

drop table if exists movies;
create table movies (
  id bigint generated always as identity primary key
);
select column_name, data_type, is_nullable, column_default, is_identity, identity_generation
from information_schema.columns 
where table_name = 'movies' and column_name = 'id';
 column_name | data_type | is_nullable | column_default | is_identity | identity_generation 
-------------+-----------+-------------+----------------+-------------+---------------------
 id          | bigint    | NO          |                | YES         | ALWAYS
(1 row)

drop table if exists movies;
create table movies (
  id bigint generated by default as identity primary key
);
select column_name, data_type, is_nullable, column_default, is_identity, identity_generation
from information_schema.columns 
where table_name = 'movies' and column_name = 'id';
 column_name | data_type | is_nullable | column_default | is_identity | identity_generation 
-------------+-----------+-------------+----------------+-------------+---------------------
 id          | bigint    | NO          |                | YES         | BY DEFAULT
(1 row)

drop table if exists movies;
create table movies (
  id bigint generated by default as identity primary key,
  name text,
  description text
);
insert into movies
  (name, description)
values
  (
    'The Empire Strikes Back',
    'After the Rebels are brutally overpowered by the Empire on the ice planet Hoth, Luke Skywalker begins Jedi training with Yoda.'
  ),
  (
    'Return of the Jedi',
    'After a daring mission to rescue Han Solo from Jabba the Hutt, the Rebels dispatch to Endor to destroy the second Death Star.'
  );
select id, name, description from movies order by id;
 id |          name           |                                                          description                                                           
----+-------------------------+--------------------------------------------------------------------------------------------------------------------------------
  1 | The Empire Strikes Back | After the Rebels are brutally overpowered by the Empire on the ice planet Hoth, Luke Skywalker begins Jedi training with Yoda.
  2 | Return of the Jedi      | After a daring mission to rescue Han Solo from Jabba the Hutt, the Rebels dispatch to Endor to destroy the second Death Star.
(2 rows)

drop table if exists movies;
drop table if exists categories;
NOTICE:  table "categories" does not exist, skipping
create table categories (
  id bigint generated always as identity primary key,
  name text 
);
create table movies (
  id bigint generated by default as identity primary key,
  name text,
  description text
);
alter table movies
  add column category_id bigint references categories;
select 
  tc.table_name, 
  kcu.column_name, 
  ccu.table_name as foreign_table_name,
  ccu.column_name as foreign_column_name 
from information_schema.table_constraints as tc 
join information_schema.key_column_usage as kcu
  on tc.constraint_name = kcu.constraint_name
  and tc.table_schema = kcu.table_schema
join information_schema.constraint_column_usage as ccu
  on ccu.constraint_name = tc.constraint_name
  and ccu.table_schema = tc.table_schema
where tc.constraint_type = 'FOREIGN KEY' and tc.table_name='movies';
 table_name | column_name | foreign_table_name | foreign_column_name 
------------+-------------+--------------------+---------------------
 movies     | category_id | categories         | id
(1 row)

drop table if exists performances;
NOTICE:  table "performances" does not exist, skipping
drop table if exists actors;
NOTICE:  table "actors" does not exist, skipping
drop table if exists movies;
create table movies (
  id bigint generated by default as identity primary key,
  name text,
  description text
);
create table actors (
  id bigint generated by default as identity primary key,
  name text
);
create table performances (
  id bigint generated by default as identity primary key,
  movie_id bigint not null references movies,
  actor_id bigint not null references actors
);
select table_name from information_schema.tables 
where table_name in ('movies', 'actors', 'performances') 
order by table_name;
  table_name  
--------------
 actors
 movies
 performances
(3 rows)

create schema private;
select schema_name from information_schema.schemata where schema_name = 'private';
 schema_name 
-------------
 private
(1 row)

drop table if exists private.salaries;
NOTICE:  table "salaries" does not exist, skipping
drop table if exists actors cascade;
NOTICE:  drop cascades to constraint performances_actor_id_fkey on table performances
create table actors (
  id bigint generated by default as identity primary key,
  name text
);
create table private.salaries (
  id bigint generated by default as identity primary key,
  salary bigint not null,
  actor_id bigint not null references public.actors
);
select table_schema, table_name from information_schema.tables 
where table_schema = 'private' and table_name = 'salaries';
 table_schema | table_name 
--------------+------------
 private      | salaries
(1 row)

drop table if exists grades;
NOTICE:  table "grades" does not exist, skipping
drop table if exists courses;
NOTICE:  table "courses" does not exist, skipping
drop table if exists students;
NOTICE:  table "students" does not exist, skipping
drop view if exists transcripts;
NOTICE:  view "transcripts" does not exist, skipping
create table students (
  id bigint generated by default as identity primary key,
  name text,
  type text
);
create table courses (
  id bigint generated by default as identity primary key,
  title text,
  code text
);
create table grades (
  id bigint generated by default as identity primary key,
  student_id bigint not null references students,
  course_id bigint not null references courses,
  result text
);
-- Insert test data
insert into students (name, type) values
  ('Princess Leia', 'undergraduate'),
  ('Yoda', 'graduate'),
  ('Anakin Skywalker', 'graduate');
insert into courses (title, code) values
  ('Introduction to Postgres', 'PG101'),
  ('Authentication Theories', 'AUTH205'),
  ('Fundamentals of Supabase', 'SUP412');
insert into grades (student_id, course_id, result) values
  (1, 1, 'B+'),
  (1, 3, 'A+'),
  (2, 2, 'A'),
  (3, 1, 'A-'),
  (3, 2, 'A'),
  (3, 3, 'B-');
-- Create view
create view transcripts as
    select
        students.name,
        students.type,
        courses.title,
        courses.code,
        grades.result
    from grades
    left join students on grades.student_id = students.id
    left join courses on grades.course_id = courses.id;
grant all on table transcripts to authenticated;
select name, type, title, code, result from transcripts order by name, code;
       name       |     type      |          title           |  code   | result 
------------------+---------------+--------------------------+---------+--------
 Anakin Skywalker | graduate      | Authentication Theories  | AUTH205 | A
 Anakin Skywalker | graduate      | Introduction to Postgres | PG101   | A-
 Anakin Skywalker | graduate      | Fundamentals of Supabase | SUP412  | B-
 Princess Leia    | undergraduate | Introduction to Postgres | PG101   | B+
 Princess Leia    | undergraduate | Fundamentals of Supabase | SUP412  | A+
 Yoda             | graduate      | Authentication Theories  | AUTH205 | A
(6 rows)

drop materialized view if exists transcripts_materialized;
NOTICE:  materialized view "transcripts_materialized" does not exist, skipping
create materialized view transcripts_materialized as
  select
    students.name,
    students.type,
    courses.title,
    courses.code,
    grades.result
  from
    grades
    left join students on grades.student_id = students.id
    left join courses on grades.course_id = courses.id;
select name, type, title, code, result from transcripts_materialized order by name, code;
       name       |     type      |          title           |  code   | result 
------------------+---------------+--------------------------+---------+--------
 Anakin Skywalker | graduate      | Authentication Theories  | AUTH205 | A
 Anakin Skywalker | graduate      | Introduction to Postgres | PG101   | A-
 Anakin Skywalker | graduate      | Fundamentals of Supabase | SUP412  | B-
 Princess Leia    | undergraduate | Introduction to Postgres | PG101   | B+
 Princess Leia    | undergraduate | Fundamentals of Supabase | SUP412  | A+
 Yoda             | graduate      | Authentication Theories  | AUTH205 | A
(6 rows)

refresh materialized view transcripts_materialized;
select count(*) from transcripts_materialized;
 count 
-------
     6
(1 row)

drop view if exists secure_transcripts;
NOTICE:  view "secure_transcripts" does not exist, skipping
create view secure_transcripts with(security_invoker=true) as (
  select name, type, title, code, result from transcripts
);
select schemaname, viewname 
from pg_views 
where viewname = 'secure_transcripts';
 schemaname |      viewname      
------------+--------------------
 public     | secure_transcripts
(1 row)

drop view if exists test_view;
NOTICE:  view "test_view" does not exist, skipping
create view test_view as select 1 as test_col;
alter view test_view set (security_invoker = true);
select schemaname, viewname 
from pg_views 
where viewname = 'test_view';
 schemaname | viewname  
------------+-----------
 public     | test_view
(1 row)

drop materialized view if exists transcripts_materialized;
drop view if exists secure_transcripts;
drop view if exists transcripts;
drop view if exists test_view;
drop table if exists grades;
drop table if exists courses;
drop table if exists students;
drop table if exists private.salaries;
drop table if exists actors;
drop table if exists performances;
drop table if exists movies;
drop table if exists categories;
drop schema if exists private;
