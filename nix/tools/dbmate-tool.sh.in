#!/usr/bin/env bash
# shellcheck shell=bash

[ ! -z "$DEBUG" ] && set -x

# Default values
PSQL_VERSION="15"
MIGRATION_FILE=""
PORTNO="@PGSQL_DEFAULT_PORT@"
PGSQL_SUPERUSER=@PGSQL_SUPERUSER@
PGPASSWORD="${PGPASSWORD:-postgres}"
PGSQL_USER="postgres"
FLAKE_URL="github:supabase/postgres"
MIGRATIONS_DIR="@MIGRATIONS_DIR@"

# Cleanup function
cleanup() {
    echo "Cleaning up..."
    
    # Kill overmind processes first
    if [ -S "./.overmind.sock" ]; then
        overmind kill || true
        sleep 2
    fi

    # Kill any remaining postgres processes
    echo "Killing any remaining postgres processes..."
    pkill -9 postgres || true
    pkill -9 -f "tmux.*overmind.*postgresql" || true
    
    # Extra cleanup for tmux sessions
    tmux ls 2>/dev/null | grep 'overmind' | cut -d: -f1 | xargs -I{} tmux kill-session -t {} || true
    
    # Remove socket and Procfile
    rm -f .overmind.sock Procfile
    
    # Verify cleanup
    remaining=$(ps aux | grep -E "(postgres|overmind|tmux.*postgresql)" | grep -v grep || true)
    if [ ! -z "$remaining" ]; then
        echo "Warning: Some processes might still be running:"
        echo "$remaining"
    fi
}

# Set up trap for cleanup on script exit
trap cleanup EXIT

# Function to display help
print_help() {
    echo "Usage: nix run .#dbmate-tool -- [options]"
    echo
    echo "Options:"
    echo "  -v, --version [15|16|orioledb-17]  Specify the PostgreSQL version to use (required defaults to --all)"
    echo "  -p, --port PORT                    Specify the port number to use (default: 5435)"
    echo "  -h, --help                         Show this help message"
    echo
    echo "Description:"
    echo "  Runs 'dbmate up' against a locally running the version of database you specify. Or 'all' to run against all versions."
    echo "  NOTE: To create a migration, you must run 'nix develop' and then 'dbmate new <migration_name>' to create a new migration file."
    echo
    echo "Examples:"
    echo "  nix run .#dbmate-tool"
    echo "  nix run .#dbmate-tool -- --version 15"
    echo "  nix run .#dbmate-tool -- --version 16 --port 5433"
}


# Parse arguments
while [[ "$#" -gt 0 ]]; do
    case "$1" in
        -v|--version)
            if [[ -n "$2" && ! "$2" =~ ^- ]]; then
                PSQL_VERSION="$2"
                shift 2
            else
                echo "Error: --version requires an argument (15, 16, or orioledb-17)"
                exit 1
            fi
            ;;
        -u|--user)
            if [[ -n "$2" && ! "$2" =~ ^- ]]; then
                PGSQL_USER="$2"
                shift 2
            else
                echo "Error: --user requires an argument"
                exit 1
            fi
            ;;
        -f|--flake-url)
            if [[ -n "$2" && ! "$2" =~ ^- ]]; then
                FLAKE_URL="$2"
                shift 2
            else
                echo "Error: --flake-url requires an argument"
                exit 1
            fi
            ;;
        -p|--port)
            if [[ -n "$2" && ! "$2" =~ ^- ]]; then
                PORTNO="$2"
                shift 2
            else
                echo "Error: --port requires an argument"
                exit 1
            fi
            ;;
        -h|--help)
            print_help
            exit 0
            ;;
        *)
            echo "Unknown option: $1"
            print_help
            exit 1
            ;;
    esac
done

PSQLBIN=$(nix build --no-link "$FLAKE_URL#psql_$PSQL_VERSION/bin" --json | jq -r '.[].outputs.out + "/bin"')
echo "Using PostgreSQL version $PSQL_VERSION from $PSQLBIN"
# Function to wait for PostgreSQL to be ready
wait_for_postgres() {
    local max_attempts=30  # Increased significantly
    local attempt=1
    
    # Give overmind a moment to actually start the process
    sleep 2
    
    while [ $attempt -le $max_attempts ]; do
        "${PSQLBIN}/pg_isready" -h localhost -p "$PORTNO" -U "$PGSQL_SUPERUSER" -d postgres
        local status=$?
        
        if [ $status -eq 0 ]; then
            echo "PostgreSQL is ready!"
            return 0
        fi
        echo "Waiting for PostgreSQL to start (attempt $attempt/$max_attempts)..."
        sleep 2
        attempt=$((attempt + 1))
    done
    
    echo "PostgreSQL failed to start after $max_attempts attempts"
    overmind echo postgres
    return 1
}

# Create Procfile
cat > Procfile << EOF
postgres_${PSQL_VERSION}: exec nix run "$FLAKE_URL#start-server" "$PSQL_VERSION"
EOF

echo "Starting PostgreSQL server with: exec nix run $FLAKE_URL#start-server $PSQL_VERSION"
cat Procfile

# Start services with Overmind
overmind start -D 


echo "Waiting for overmind socket..."
max_wait=5
count=0
while [ $count -lt $max_wait ]; do
    if [ -S "./.overmind.sock" ]; then
        # Found the socket, give it a moment to be ready
        sleep 2
        echo "Socket file found and ready"
        break
    fi
    echo "Waiting for socket file (attempt $count/$max_wait)"
    sleep 1
    count=$((count + 1))
done


echo "Waiting for PostgreSQL to be ready..."

#Wait for PostgreSQL to be ready to accept connections
if ! wait_for_postgres; then
    echo "Failed to connect to PostgreSQL server"
    exit 1
fi

echo "PostgreSQL server is ready"

# Configure PostgreSQL roles and permissions
if ! "${PSQLBIN}/psql" -v ON_ERROR_STOP=1 --no-password --no-psqlrc -U "$PGSQL_SUPERUSER" -p "$PORTNO" -h localhost -d postgres <<-EOSQL
    create role postgres superuser login password '$PGPASSWORD';
    alter database postgres owner to postgres;
EOSQL
then
    echo "Failed to configure PostgreSQL roles and permissions"
    exit 1
fi
#set db url to run dbmate
export DATABASE_URL="postgres://$PGSQL_USER:$PGPASSWORD@localhost:$PORTNO/postgres?sslmode=disable"

ls -la "$MIGRATIONS_DIR"
pwd
dbmate --migrations-dir "$MIGRATIONS_DIR/init-scripts"  up
"${PSQLBIN}/psql" -v ON_ERROR_STOP=1 --no-password --no-psqlrc -U postgres  -p "$PORTNO" -h localhost -c "ALTER USER supabase_admin WITH PASSWORD '$PGPASSWORD'"
export DATABASE_URL="postgres://$PGSQL_SUPERUSER:$PGPASSWORD@localhost:$PORTNO/postgres?sslmode=disable"
dbmate --migrations-dir "$MIGRATIONS_DIR/migrations" up
echo "PostgreSQL configuration completed successfully"
