name: Test pg_upgrade

on:
  push:
    branches:
      - develop
      - pcnc/auto-pg_upgrade-testing
      - sam/nix-docker-build
  workflow_dispatch:

permissions:
  id-token: write

jobs:
  test:
    strategy:
      matrix:
        base_pg_version:
          - 15.6.1.90-nix-staged
    runs-on: arm-runner
    timeout-minutes: 30
    defaults:
      run:
        working-directory: ./tests/pg_upgrade
    env:
      PGPORT: 5478
      PGPASSWORD: postgres
      PGDATABASE: postgres
      PGUSER: supabase_admin
      PGHOST: localhost
      PG_MAJOR_VERSION: 15
      IS_CI: true
      container: pg_upgrade_test
    steps:
      - uses: actions/checkout@v3
      
      - name: Grab release version
        id: process_release_version
        working-directory: ./
        run: |
          VERSION=$(sed -e 's/postgres-version = "\(.*\)"/\1/g' common-nix.vars.pkr.hcl)
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: configure aws credentials - staging
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.DEV_AWS_ROLE }}
          aws-region: "us-east-1"

      # - name: Download pg_upgrade_scripts and binaries
      #   run: |
      #     aws s3 cp s3://${{ secrets.ARTIFACTS_BUCKET }}/upgrades/postgres/supabase-postgres-${{ steps.process_release_version.outputs.version }}/pg_upgrade_scripts.tar.gz scripts/pg_upgrade_scripts.tar.gz
      # TODO replace with revised script 
      - run: docker context create builders
      - uses: docker/setup-buildx-action@v2
        with:
          endpoint: builders
          driver-opts: image=moby/buildkit:v0.11.6
          buildkitd-flags: --debug

      - name: Start Postgres
        run: |
          docker rm -f "$container" || true
          docker run --name "$container" --env-file .env \
          -v "$(pwd)/scripts:/tmp/upgrade" \
          -d \
          -p 5432:5432 \
          "samrose/postgresql-15-aarch64-linux:${{ matrix.base_pg_version }}"
          docker logs "$container"
      - name: Check container status
        run: |
          docker ps -a
          docker inspect "$container" --format '{{.State.Status}}'
          docker inspect "$container" --format '{{.State.ExitCode}}'

      - name: Install pg_prove
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends perl cpanminus
          sudo cpanm -n App::cpanminus
          sudo cpanm -n TAP::Parser::SourceHandler::pgTAP
        env:
          SHELL: /bin/bash
          PERL_MM_USE_DEFAULT: 1
          PERL_MM_NONINTERACTIVE: 1

      - name: Wait for healthy database
        run: |
          start_time=$(date +%s)
          timeout=600  # 10 minutes in seconds
          
          while ! docker exec "$container" bash -c "pg_isready -p 5435"; do
            current_time=$(date +%s)
            elapsed=$((current_time - start_time))
            
            if [ $elapsed -ge $timeout ]; then
                echo "Timeout reached after ${elapsed} seconds. Database is not ready."
                docker logs "$container"
                docker rm -f "$container"
                exit 1
            fi
            
            echo "Database not ready. Waiting..."
            sleep 5
          done
          
          echo "Database is ready after ${elapsed} seconds."

      - name: Run migrations
        run: docker exec "$container" bash -c "ls -la /"

      # - name: Run initial tests
      #   run: pg_prove "../../migrations/tests/test.sql"
      #   env:
      #     PERL5LIB: /usr/local/lib/perl5

      # - name: Apply pre-upgrade fixtures
      #   run: |
      #     psql -f "./tests/98-data-fixtures.sql"
      #     psql -f "./tests/99-fixtures.sql"
          
      # - name: Initiate upgrade
      #   run: docker exec "$container" bash -c '/tmp/upgrade/pg_upgrade_scripts/initiate.sh "$PG_MAJOR_VERSION"; exit $?'

      # - name: Complete pg_upgrade
      #   run: docker exec pg_upgrade_test bash -c '/tmp/upgrade/pg_upgrade_scripts/complete.sh; exit $?'

      # - name: Run post-upgrade tests
      #   run: |
      #     pg_prove tests/01-schema.sql
      #     pg_prove tests/02-data.sql
      #     pg_prove tests/03-settings.sql

      - name: Clean up container
        if: ${{ always() }}
        continue-on-error: true
        run: docker rm -f "$container" || true
