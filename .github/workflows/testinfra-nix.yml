name: Testinfra Integration Tests

on:
  pull_request:
  workflow_dispatch:

jobs:
  test-ami:
    strategy:
      matrix:
        include:
          - runner: arm-runner
            arch: arm64
            ubuntu_release: focal
            ubuntu_version: 20.04
            mcpu: neoverse-n1
    runs-on: ${{ matrix.runner }}
    timeout-minutes: 150
    permissions:
      contents: write
      packages: write
      id-token: write

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - id: args
        uses: mikefarah/yq@master
        with:
          cmd: yq 'to_entries | map(select(.value|type == "!!str")) |  map(.key + "=" + .value) | join("\n")' 'ansible/vars.yml'

      - run: docker context create builders

      - uses: docker/setup-buildx-action@v3
        with:
          endpoint: builders

      - name: Build AMI stage 1
        run: |
          packer init amazon-arm64-nix.pkr.hcl
          GIT_SHA=${{github.sha}}
          AMI_ID=$(packer build -machine-readable -var "git-head-version=${GIT_SHA}" -var "packer-execution-id=${GITHUB_RUN_ID}" -var-file="development-arm.vars.pkr.hcl" -var-file="common-nix.vars.pkr.hcl" -var "ansible_arguments="  amazon-arm64-nix.pkr.hcl | tee >(cat >&2) | awk -F, '$0 ~/artifact,0,id/ {print $6}' | cut -d ':' -f2)
          echo "AMI_ID=${AMI_ID}" >> $GITHUB_ENV

      - name: Wait for AMI to be available
        run: |
          while true; do
            AMI_STATUS=$(aws ec2 describe-images --image-ids ${{ env.AMI_ID }} --query 'Images[0].State' --output text)
            if [ "$AMI_STATUS" == "available" ]; then
              echo "AMI is now available."
              break
            fi
            echo "AMI status: $AMI_STATUS. Waiting for 30 seconds..."
            sleep 30
          done

      - name: Build AMI stage 2
        run: |
          packer init stage2-nix-psql.pkr.hcl
          GIT_SHA=${{github.sha}}
          AMI_ID=${{ env.AMI_ID }}
          packer build -var "git-head-version=${GIT_SHA}" -var "packer-execution-id=${GITHUB_RUN_ID}" -var-file="development-arm.vars.pkr.hcl" -var-file="common-nix.vars.pkr.hcl"  -var "region=ap-southeast-1" -var 'ami_regions=["ap-southeast-1"]' -var "force-deregister=true" -var "source_ami=${AMI_ID}" stage2-nix-psql-testinfra.pkr.hcl
  
      - name: Run tests
        timeout-minutes: 10
        run: |
          # TODO: use poetry for pkg mgmt
          pip3 install boto3 boto3-stubs[essential] docker ec2instanceconnectcli pytest pytest-testinfra[paramiko,docker] requests
          pytest -vv -s testinfra/test_ami.py
      - name: Cleanup resources on build cancellation
        if: ${{ cancelled() }}
        run: |
          aws ec2 --region ap-southeast-1 describe-instances --filters "Name=tag:packerExecutionId,Values=${GITHUB_RUN_ID}" --query "Reservations[].Instances[].InstanceId" --output text | xargs -n 1 -I {} aws ec2 terminate-instances --region ap-southeast-1 --instance-ids {}
      - name: Cleanup resources on build cancellation
        if: ${{ always() }}
        run: |
          aws ec2 --region ap-southeast-1 describe-instances --filters "Name=tag:testinfra-run-id,Values=${GITHUB_RUN_ID}" --query "Reservations[].Instances[].InstanceId" --output text | xargs -n 1 -I {} aws ec2 terminate-instances --region ap-southeast-1 --instance-ids {} || true
