name: Release 15.6 on Dockerhub

on:
  push:
    branches:
      - develop
      - sam/docker-int-test
    paths:
      - ".github/workflows/dockerhub-release-15-6.yml"
      - "common-nix.vars*"
jobs:
  settings:
    runs-on: ubuntu-latest
    outputs:
      docker_version: ${{ steps.settings.outputs.postgres-version }}
      image_tag: supabase/postgres:${{ steps.settings.outputs.postgres-version }}
      build_args: ${{ steps.args.outputs.result }}
    steps:
      - uses: actions/checkout@v3
      - id: settings
        # Remove spaces and quotes to get the raw version string
        run: sed -r 's/(\s|\")+//g' common-nix.vars.pkr.hcl >> $GITHUB_OUTPUT
      - id: args
        uses: mikefarah/yq@master
        with:
          cmd: yq 'to_entries | map(select(.value|type == "!!str")) |  map(.key + "=" + .value) | join("\n")' 'ansible/vars.yml'

  build_test_image:
    needs: [settings]
    strategy:
      matrix:
        include:
          - runner: [self-hosted, X64]
            arch: amd64
          - runner: arm-runner
            arch: arm64
    runs-on: ${{ matrix.runner }}
    timeout-minutes: 180
    outputs:
      image_digest: ${{ steps.build.outputs.digest }}
    steps:
      - run: docker context create builders
      - uses: docker/setup-buildx-action@v3
        with:
          endpoint: builders
      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - id: build
        uses: docker/build-push-action@v5
        with:
          push: true
          build-args: |
            ${{ needs.settings.outputs.build_args }}
          target: production
          tags: ${{ needs.settings.outputs.image_tag }}_${{ matrix.arch }}-testing
          platforms: linux/${{ matrix.arch }}
          cache-from: type=gha,scope=${{ github.ref_name }}-latest-${{ matrix.arch }}-dev
          cache-to: type=gha,mode=max,scope=${{ github.ref_name }}-latest-${{ matrix.arch }}-dev
          file: "Dockerfile-156"
      - name: Slack Notification
        if: ${{ failure() }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_NOTIFICATIONS_WEBHOOK }}
          SLACK_USERNAME: "gha-failures-notifier"
          SLACK_COLOR: "danger"
          SLACK_MESSAGE: "Building Postgres ${{ matrix.arch }} image failed"
          SLACK_FOOTER: ""
  
  supabase_test:
    needs: [settings, build_test_image]
    strategy:
      matrix:
        include:
          - runner: [self-hosted, X64]
            arch: amd64
          - runner: arm-runner
            arch: arm64
    runs-on: ${{ matrix.runner }}
    steps:
      - uses: actions/checkout@v3
      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - uses: supabase/setup-cli@v1
        with:
          version: latest
      - run: |
          supabase init
          mkdir -p supabase/.temp
          echo "${{ needs.settings.outputs.docker_version }}_${{ matrix.arch }}-testing" > supabase/.temp/postgres-version
      - run: supabase start
        env:
          SUPABASE_INTERNAL_IMAGE_REGISTRY: docker.io
      - name: Remove testing image from Docker Hub
        if: success()
        run: |
          TOKEN=$(curl -s -H "Content-Type: application/json" -X POST -d '{"username": "'${DOCKER_USERNAME}'", "password": "'${DOCKER_PASSWORD}'"}' https://hub.docker.com/v2/users/login/ | jq -r .token)
          curl -i -X DELETE \
            -H "Authorization: JWT ${TOKEN}" \
            https://hub.docker.com/v2/repositories/supabase/postgres/tags/${{ needs.settings.outputs.docker_version }}_${{ matrix.arch }}-testing/
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      - name: Slack Notification
        if: ${{ failure() }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_NOTIFICATIONS_WEBHOOK }}
          SLACK_USERNAME: "gha-failures-notifier"
          SLACK_COLOR: "danger"
          SLACK_MESSAGE: "Supabase test failed on ${{ matrix.arch }}"
          SLACK_FOOTER: ""
  # build_and_push_release_image:
  #   needs: [settings, supabase_test]
  #   strategy:
  #     matrix:
  #       include:
  #         - runner: [self-hosted, X64]
  #           arch: amd64
  #         - runner: arm-runner
  #           arch: arm64
  #   runs-on: ${{ matrix.runner }}
  #   timeout-minutes: 180
  #   outputs:
  #     image_digest: ${{ steps.build.outputs.digest }}
  #   steps:
  #     - run: docker context create builders
  #     - uses: docker/setup-buildx-action@v3
  #       with:
  #         endpoint: builders
  #     - uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}
  #     - id: build
  #       uses: docker/build-push-action@v5
  #       with:
  #         push: true
  #         build-args: |
  #           ${{ needs.settings.outputs.build_args }}
  #         target: production
  #         tags: ${{ needs.settings.outputs.image_tag }}_${{ matrix.arch }}
  #         platforms: linux/${{ matrix.arch }}
  #         cache-from: type=gha,scope=${{ github.ref_name }}-latest-${{ matrix.arch }}
  #         cache-to: type=gha,mode=max,scope=${{ github.ref_name }}-latest-${{ matrix.arch }}
  #         file: "Dockerfile-156"
  #     - name: Slack Notification
  #       if: ${{ failure() }}
  #       uses: rtCamp/action-slack-notify@v2
  #       env:
  #         SLACK_WEBHOOK: ${{ secrets.SLACK_NOTIFICATIONS_WEBHOOK }}
  #         SLACK_USERNAME: "gha-failures-notifier"
  #         SLACK_COLOR: "danger"
  #         SLACK_MESSAGE: "Building Postgres ${{ matrix.arch }} image failed"
  #         SLACK_FOOTER: ""        
  # merge_manifest:
  #   needs: [settings, build_and_push_release_image]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: docker/setup-buildx-action@v3
  #     - uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}
  #     - name: Merge multi-arch manifests
  #       run: |
  #         docker buildx imagetools create -t ${{ needs.settings.outputs.image_tag }} \
  #         ${{ needs.settings.outputs.image_tag }}_amd64 \
  #         ${{ needs.settings.outputs.image_tag }}_arm64
  #     - name: Slack Notification
  #       if: ${{ failure() }}
  #       uses: rtCamp/action-slack-notify@v2
  #       env:
  #         SLACK_WEBHOOK: ${{ secrets.SLACK_NOTIFICATIONS_WEBHOOK }}
  #         SLACK_USERNAME: "gha-failures-notifier"
  #         SLACK_COLOR: "danger"
  #         SLACK_MESSAGE: "Building Postgres image failed"
  #         SLACK_FOOTER: ""

  # publish:
  #   needs: [settings, merge_manifest]
  #   # Call workflow explicitly because events from actions cannot trigger more actions
  #   uses: ./.github/workflows/mirror.yml
  #   with:
  #     version: ${{ needs.settings.outputs.docker_version }}
  #   secrets: inherit
